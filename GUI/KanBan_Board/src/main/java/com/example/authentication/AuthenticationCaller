import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStream;
import java.io.InputStreamReader;
import java.util.ArrayList;

public class AuthenticationCaller {
    public static void call(ArrayList<String> parameters, String status) {
        try {
            ProcessBuilder processBuilder = new ProcessBuilder("./GUI/KanBan_Board/src/main/java/com/example/authentication/bin/Debug/net8.0-windows", "login");

            // Redirect the standard output stream to capture the output
            processBuilder.redirectErrorStream(true);

            // Start the process
            Process process = processBuilder.start();

            // Get the input stream of the process
            InputStream inputStream = process.getInputStream();
            BufferedReader reader = new BufferedReader(new InputStreamReader(inputStream));

            // Read the output line by line
            String line;
            ArrayList<String> lines = new ArrayList<String>();
            while ((line = reader.readLine()) != null) {
                lines.add(line);
            }

            // Read email and ID
            String email, id;
            if (lines.get(1).equalsIgnoreCase("Success")) {
                email = lines.get(3);
                id = lines.get(2);
            } else {
                email = null;
                id = null;
            }

            // You can optionally wait for the process to complete
            process.waitFor();

            if (id != null && email != null) {
                // Building the client
                CosmosAsyncClient cosmosAsyncClient = new CosmosClientBuilder()
                .endpoint("https://kanzen.documents.azure.com:443/")
                .key("EiPkeEq8ZBCjla6NpEZtbqiOxCoLP6hxFM7hR6uaujsXoXLUtuatBW8E0v0ysdfvZgCxAy83oZVoACDbheFsFQ==")
                .buildAsyncClient();

                // Getting the record if exists
                String filter = String.format("SELECT c.userStatus FROM c WHERE c.id = '%s'", id);
                ItemResponse<User> response = cosmosAsyncClient.getItems().queryItems(Users, filter, null).blockFirst();

                // If record does not exist, create
                if (response == null) {
                    User newUser = new User(id, email, status); 
                    cosmosAsyncClient.getItems().createItem(User, newUser).block();
                }
                
                String userStatus = response.getItem().getUserStatus();
            }

            // Return id, email and user status
            parameters.set(0, id);
            parameters.set(1, email);
        } catch (IOException | InterruptedException e) {
            e.printStackTrace();
        }
    }

    public static void main(String[] args) {
        new AuthenticationCaller(new ArrayList<String>, "Member");
    }
}